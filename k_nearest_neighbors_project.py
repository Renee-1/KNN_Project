# -*- coding: utf-8 -*-
"""K Nearest Neighbors Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/163jCBuyCIhb_7nu3pp-qfwqqol8B_PLq

___

# K Nearest Neighbors Project 

## Import Libraries
**Imported pandas,seaborn, and the usual libraries.**
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

"""## Get the Data
**Read the 'KNN_Project_Data csv file into a dataframe**
"""



from google.colab import drive
drive.mount('/content/drive')

df = pd.read_csv('/content/drive/MyDrive/DataSets/KNN_Project_Data')

"""**The head of the dataframe.**"""

df.head()

"""# EDA - Exploratory Data Analysis

**Used seaborn on the dataframe to create a pairplot with the hue indicated by the TARGET CLASS column.**
"""

# THIS IS GOING TO BE A VERY LARGE PLOT
sns.pairplot(df,hue='TARGET CLASS',palette='coolwarm')

"""# Standardize the Variables"""

from sklearn.preprocessing import StandardScaler

"""**Created a StandardScaler() object called scaler.**"""

scaler = StandardScaler()

"""**Fit scaler to the features.**"""

scaler.fit(df.drop('TARGET CLASS',axis=1))

"""**Used the .transform() method to transform the features to a scaled version.**"""

scaled_features = scaler.transform(df.drop('TARGET CLASS',axis=1))

"""**Converted the scaled features to a dataframe and check the head of this dataframe to make sure if the scaling worked.**"""

df_feat = pd.DataFrame(scaled_features,columns=df.columns[:-1])
df_feat.head()

"""# Train Test Split

**Used train_test_split to split data into a training set and a testing set.**
"""

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(scaled_features,df['TARGET CLASS'],
                                                    test_size=0.30)

"""# Using KNN

**Imported KNeighborsClassifier from scikit learn.**
"""

from sklearn.neighbors import KNeighborsClassifier

"""**Generated a KNN model instance with n_neighbors=1**"""

knn = KNeighborsClassifier(n_neighbors=1)

"""**Fit this KNN model to the training data.**"""

knn.fit(X_train,y_train)

"""# Predictions and Evaluations

**Used the predict method to predict values using your KNN model and X_test.**
"""

pred = knn.predict(X_test)

"""**Generated a confusion matrix and classification report.**"""

from sklearn.metrics import classification_report,confusion_matrix

print(confusion_matrix(y_test,pred))

print(classification_report(y_test,pred))

"""# Choosing a K Value
**Created a for loop that trains various KNN models with different k values, then keep track of the error_rate for each of these models with a list.**
"""

error_rate = []

# Will take some time
for i in range(1,40):
    
    knn = KNeighborsClassifier(n_neighbors=i)
    knn.fit(X_train,y_train)
    pred_i = knn.predict(X_test)
    error_rate.append(np.mean(pred_i != y_test))

"""**Generated a plot.**"""

plt.figure(figsize=(10,6))
plt.plot(range(1,40),error_rate,color='blue', linestyle='dashed', marker='o',
         markerfacecolor='red', markersize=10)
plt.title('Error Rate vs. K Value')
plt.xlabel('K')
plt.ylabel('Error Rate')

"""## Retrain with new K Value

**We now retrain the model with the best K value and re-do the classification report and the confusion matrix.**
"""

# NOW WITH K=30
knn = KNeighborsClassifier(n_neighbors=30)

knn.fit(X_train,y_train)
pred = knn.predict(X_test)

print('WITH K=30')
print('\n')
print(confusion_matrix(y_test,pred))
print('\n')
print(classification_report(y_test,pred))

"""# The End!"""